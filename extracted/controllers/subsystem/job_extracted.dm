	name = "Jobs"
/datum/controller/subsystem/job/Initialize(timeofday)
/datum/controller/subsystem/job/proc/set_overflow_role(new_overflow_role)
/datum/controller/subsystem/job/proc/SetupOccupations()
	name = list()
	name = job
/datum/controller/subsystem/job/proc/GetJob(rank)
/datum/controller/subsystem/job/proc/GetJobType(jobtype)
/datum/controller/subsystem/job/proc/get_department_type(department_type)
/datum/controller/subsystem/job/proc/AssignRole(mob/dead/new_player/player, datum/job/job, latejoin = FALSE, do_eligibility_checks = TRUE)
/datum/controller/subsystem/job/proc/FindOccupationCandidates(datum/job/job, level)
/datum/controller/subsystem/job/proc/GiveRandomJob(mob/dead/new_player/player)
/datum/controller/subsystem/job/proc/ResetOccupations()
/datum/controller/subsystem/job/proc/FillHeadPosition()
/datum/controller/subsystem/job/proc/CheckHeadPositions(level)
/datum/controller/subsystem/job/proc/fill_ai_positions()
/datum/controller/subsystem/job/proc/DivideOccupations()
/datum/controller/subsystem/job/proc/HandleUnassigned(mob/dead/new_player/player)
/datum/controller/subsystem/job/proc/EquipRank(mob/living/equipping, datum/job/job, client/player_client)
/datum/controller/subsystem/job/proc/handle_auto_deadmin_roles(client/C, rank)
/datum/controller/subsystem/job/proc/setup_officer_positions()
/datum/controller/subsystem/job/proc/LoadJobs()
/datum/controller/subsystem/job/proc/HandleFeedbackGathering()
/datum/controller/subsystem/job/proc/PopcapReached()
/datum/controller/subsystem/job/proc/RejectPlayer(mob/dead/new_player/player)
/datum/controller/subsystem/job/Recover()
/datum/controller/subsystem/job/proc/RecoverJob(datum/job/J)
/atom/proc/JoinPlayerHere(mob/joining_mob, buckle)
/obj/structure/chair/JoinPlayerHere(mob/joining_mob, buckle)
/datum/controller/subsystem/job/proc/SendToLateJoin(mob/M, buckle = TRUE)
/datum/controller/subsystem/job/proc/get_last_resort_spawn_points()
/datum/controller/subsystem/job/proc/DropLandAtRandomHallwayPoint(mob/living/living_mob)
/datum/controller/subsystem/job/proc/get_living_heads()
/datum/controller/subsystem/job/proc/get_all_heads()
/datum/controller/subsystem/job/proc/get_living_sec()
/datum/controller/subsystem/job/proc/get_all_sec()
/datum/controller/subsystem/job/proc/JobDebug(message)
/datum/controller/subsystem/job/proc/setup_job_lists()
/obj/item/paper/fluff/spare_id_safe_code
	name = "Nanotrasen-Approved Spare ID Safe Code"
	desc = "Proof that you have been approved for Captaincy, with all its glory and all its horror."
/obj/item/paper/fluff/spare_id_safe_code/Initialize(mapload)
/obj/item/paper/fluff/emergency_spare_id_safe_code
	name = "Emergency Spare ID Safe Code Requisition"
	desc = "Proof that nobody has been approved for Captaincy. A skeleton key for a skeleton shift."
/obj/item/paper/fluff/emergency_spare_id_safe_code/Initialize(mapload)
/datum/controller/subsystem/job/proc/promote_to_captain(mob/living/carbon/human/new_captain, acting_captain = FALSE)
/datum/controller/subsystem/job/proc/send_spare_id_safe_code(loc)
/datum/controller/subsystem/job/proc/assign_priority_positions()
/datum/controller/subsystem/job/proc/job_priority_level_to_string(priority)
/datum/controller/subsystem/job/proc/check_job_eligibility(mob/dead/new_player/player, datum/job/possible_job, debug_prefix = "", add_job_to_log = FALSE)
