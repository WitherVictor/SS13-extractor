/mob/living/simple_animal/bot
/mob/living/simple_animal/bot/proc/get_mode()
/mob/living/simple_animal/bot/proc/get_mode_ui()
/mob/living/simple_animal/bot/proc/turn_on()
/mob/living/simple_animal/bot/proc/turn_off()
/mob/living/simple_animal/bot/proc/get_bot_flag(checked_flag)
/mob/living/simple_animal/bot/Initialize(mapload)
/mob/living/simple_animal/bot/Destroy()
/mob/living/simple_animal/bot/proc/check_access(mob/living/user)
/mob/living/simple_animal/bot/bee_friendly()
/mob/living/simple_animal/bot/death(gibbed)
/mob/living/simple_animal/bot/proc/explode()
/mob/living/simple_animal/bot/emag_act(mob/user, obj/item/card/emag/emag_card)
/mob/living/simple_animal/bot/examine(mob/user)
/mob/living/simple_animal/bot/adjustHealth(amount, updating_health = TRUE, forced = FALSE)
/mob/living/simple_animal/bot/updatehealth()
/mob/living/simple_animal/bot/med_hud_set_health()
/mob/living/simple_animal/bot/med_hud_set_status()
/mob/living/simple_animal/bot/handle_automated_action() //Master process which handles code common across most bots.
/mob/living/simple_animal/bot/attack_hand(mob/living/carbon/human/user, list/modifiers)
/mob/living/simple_animal/bot/attack_ai(mob/user)
/mob/living/simple_animal/bot/ui_interact(mob/user, datum/tgui/ui)
/mob/living/simple_animal/bot/AltClick(mob/user)
/mob/living/simple_animal/bot/proc/unlock_with_id(mob/user)
/mob/living/simple_animal/bot/attackby(obj/item/attacking_item, mob/living/user, params)
/mob/living/simple_animal/bot/bullet_act(obj/projectile/Proj)
/mob/living/simple_animal/bot/emp_act(severity)
/mob/living/simple_animal/bot/proc/emp_reset(was_on)
/mob/living/simple_animal/bot/proc/speak(message,channel) //Pass a message to have the bot say() it. Pass a frequency to say it on the radio.
/mob/living/simple_animal/bot/radio(message, list/message_mods = list(), list/spans, language)
/mob/living/simple_animal/bot/proc/drop_part(obj/item/drop_item, dropzone)
/mob/living/simple_animal/bot/proc/scan(scan_type, old_target, scan_range = DEFAULT_SCAN_RANGE)
/mob/living/simple_animal/bot/proc/checkscan(scan, scan_type, old_target)
/mob/living/simple_animal/bot/proc/check_bot(targ)
/mob/living/simple_animal/bot/proc/process_scan(scan_target)
/mob/living/simple_animal/bot/proc/add_to_ignore(subject)
/mob/living/simple_animal/bot/proc/bot_move(dest, move_speed)
/mob/living/simple_animal/bot/proc/bot_step()
/mob/living/simple_animal/bot/proc/check_bot_access()
/mob/living/simple_animal/bot/proc/call_bot(caller, turf/waypoint, message = TRUE)
/mob/living/simple_animal/bot/proc/call_mode() //Handles preparing a bot for a call, as well as calling the move proc.
/mob/living/simple_animal/bot/proc/bot_reset()
/mob/living/simple_animal/bot/proc/bot_patrol()
/mob/living/simple_animal/bot/proc/do_patrol()
/mob/living/simple_animal/bot/proc/start_patrol()
/mob/living/simple_animal/bot/proc/target_patrol()
/mob/living/simple_animal/bot/proc/patrol_step()
/mob/living/simple_animal/bot/proc/patrol_step_not_moved()
/mob/living/simple_animal/bot/proc/find_patrol_target()
/mob/living/simple_animal/bot/proc/get_next_patrol_target()
/mob/living/simple_animal/bot/proc/find_nearest_beacon()
/mob/living/simple_animal/bot/proc/bot_control(command, mob/user, list/user_access = list())
/mob/living/simple_animal/bot/proc/bot_control_message(command, user)
/mob/living/simple_animal/bot/proc/bot_summon() // summoned to PDA
/mob/living/simple_animal/bot/proc/calc_path(turf/avoid)
/mob/living/simple_animal/bot/proc/calc_summon_path(turf/avoid)
/mob/living/simple_animal/bot/proc/do_calc_summon_path(turf/avoid)
/mob/living/simple_animal/bot/proc/summon_step()
/mob/living/simple_animal/bot/proc/summon_step_not_moved()
/mob/living/simple_animal/bot/Bump(atom/A) //Leave no door unopened!
/mob/living/simple_animal/bot/ui_data(mob/user)
/mob/living/simple_animal/bot/ui_act(action, params)
/mob/living/simple_animal/bot/update_icon_state()
/mob/living/simple_animal/bot/proc/topic_denied(mob/user) //Access check proc for bot topics! Remember to place in a bot's individual Topic if desired.
/mob/living/simple_animal/bot/proc/insertpai(mob/user, obj/item/paicard/card)
	name = paicard.pai.name
/mob/living/simple_animal/bot/proc/ejectpai(mob/user = null, announce = TRUE)
	name = initial(src.name)
/mob/living/simple_animal/bot/proc/ejectpairemote(mob/user)
/mob/living/simple_animal/bot/Login()
/mob/living/simple_animal/bot/Logout()
/mob/living/simple_animal/bot/revive(full_heal = FALSE, admin_revive = FALSE)
/mob/living/simple_animal/bot/ghost()
/mob/living/simple_animal/bot/sentience_act()
/mob/living/simple_animal/bot/proc/set_path(list/newpath)
/mob/living/simple_animal/bot/proc/increment_path()
/mob/living/simple_animal/bot/rust_heretic_act()
