/datum/component/storage
/datum/component/storage/Initialize(datum/component/storage/concrete/master)
/datum/component/storage/Destroy()
/datum/component/storage/PreTransfer()
/datum/component/storage/proc/set_holdable(list/can_hold_list, list/cant_hold_list)
/datum/component/storage/proc/generate_hold_desc(can_hold_list)
	desc = "\a [initial(valid_item.name)]"
/datum/component/storage/proc/update_actions()
/datum/component/storage/proc/change_master(datum/component/storage/concrete/new_master)
/datum/component/storage/proc/master()
/datum/component/storage/proc/real_location()
/datum/component/storage/proc/canreach_react(datum/source, list/next)
/datum/component/storage/proc/on_move()
/datum/component/storage/proc/attack_self(datum/source, mob/M)
/datum/component/storage/proc/preattack_intercept(datum/source, obj/O, mob/M, params)
/datum/component/storage/proc/async_preattack_intercept(obj/item/attack_item, mob/pre_attack_mob)
/datum/component/storage/proc/handle_mass_item_insertion(list/things, datum/component/storage/src_object, mob/user, datum/progressbar/progress)
/datum/component/storage/proc/handle_mass_pickup(list/things, atom/thing_loc, list/rejections, datum/progressbar/progress)
/datum/component/storage/proc/quick_empty(mob/M)
/datum/component/storage/proc/mass_remove_from_storage(atom/target, list/things, datum/progressbar/progress, trigger_on_found = TRUE)
/datum/component/storage/proc/do_quick_empty(atom/_target)
/datum/component/storage/proc/set_locked(datum/source, new_state)
/datum/component/storage/proc/_process_numerical_display()
/datum/component/storage/proc/orient2hud()
/datum/component/storage/proc/standard_orient_objs(rows, cols, list/obj/item/numerical_display_contents)
/datum/component/storage/proc/show_to(mob/M)
/datum/component/storage/proc/mob_deleted(datum/source)
/datum/component/storage/proc/hide_from(mob/M)
/datum/component/storage/proc/close(mob/M)
/datum/component/storage/proc/close_all()
/datum/component/storage/proc/emp_act(datum/source, severity)
/datum/component/storage/proc/orient_objs(tx, ty, mx, my)
/datum/component/storage/proc/_removal_reset(atom/movable/thing)
/datum/component/storage/proc/_remove_and_refresh(datum/source, atom/movable/gone, direction)
/datum/component/storage/proc/remove_from_storage(atom/movable/AM, atom/new_location)
/datum/component/storage/proc/refresh_mob_views()
/datum/component/storage/proc/can_see_contents()
/datum/component/storage/proc/dump_content_at(atom/dest_object, mob/M)
/datum/component/storage/proc/attackby(datum/source, obj/item/I, mob/M, params)
/datum/component/storage/proc/return_inv(recursive)
/datum/component/storage/proc/contents() //ONLY USE IF YOU NEED TO COPY CONTENTS OF REAL LOCATION, COPYING IS NOT AS FAST AS DIRECT ACCESS!
/datum/component/storage/proc/signal_return_inv(datum/source, list/interface, recursive = TRUE)
/datum/component/storage/proc/topic_handle(datum/source, user, href_list)
/datum/component/storage/proc/handle_show_valid_items(datum/source, user)
/datum/component/storage/proc/mousedrop_onto(datum/source, atom/over_object, mob/M)
/datum/component/storage/proc/user_show_to_mob(mob/M, force = FALSE)
/datum/component/storage/proc/mousedrop_receive(datum/source, atom/movable/O, mob/M)
/datum/component/storage/proc/can_be_inserted(obj/item/I, stop_messages = FALSE, mob/M)
/datum/component/storage/proc/_insert_physical_item(obj/item/I, override = FALSE)
/datum/component/storage/proc/handle_item_insertion(obj/item/I, prevent_warning = FALSE, mob/M, datum/component/storage/remote)
/datum/component/storage/proc/mob_item_insertion_feedback(mob/user, mob/M, obj/item/I, override = FALSE)
/datum/component/storage/proc/update_icon()
/datum/component/storage/proc/signal_insertion_attempt(datum/source, obj/item/I, mob/M, silent = FALSE, force = FALSE)
/datum/component/storage/proc/signal_can_insert(datum/source, obj/item/I, mob/M, silent = FALSE)
/datum/component/storage/proc/show_to_ghost(datum/source, mob/dead/observer/M)
/datum/component/storage/proc/signal_show_attempt(datum/source, mob/showto, force = FALSE)
/datum/component/storage/proc/on_check()
/datum/component/storage/proc/check_locked()
/datum/component/storage/proc/signal_take_type(datum/source, type, atom/destination, amount = INFINITY, check_adjacent = FALSE, force = FALSE, mob/user, list/inserted)
/datum/component/storage/proc/remaining_space_items()
/datum/component/storage/proc/signal_fill_type(datum/source, type, amount = 20, force = FALSE)
/datum/component/storage/proc/on_attack_hand(datum/source, mob/user)
/datum/component/storage/proc/signal_on_pickup(datum/source, mob/user)
/datum/component/storage/proc/signal_take_obj(datum/source, atom/movable/AM, new_loc, force = FALSE)
/datum/component/storage/proc/signal_quick_empty(datum/source, atom/loctarget)
/datum/component/storage/proc/signal_hide_attempt(datum/source, mob/target)
/datum/component/storage/proc/open_storage(mob/user)
/datum/component/storage/proc/on_open_storage_click(datum/source, mob/user, list/modifiers)
/datum/component/storage/proc/on_open_storage_attackby(datum/source, obj/item/weapon, mob/user, params)
/datum/component/storage/proc/attempt_put_in_hands(obj/item/to_remove, mob/user)
/datum/component/storage/proc/action_trigger(datum/signal_source, datum/action/source)
/datum/component/storage/proc/gather_mode_switch(mob/user)
